import React, { useState, useEffect } from 'react';

export interface YouTubeFilterProps {
  onFilterChange?: (filters: FilterState) => void;
  channelList?: string[];
}

export interface FilterState {
  selectedCategory: string;
  selectedCriteria: string;
  selectedCountry: string;
  selectedPeriod: string;
  selectedDate: number;
  selectedChannel?: string;
}

const YouTubeFilter: React.FC<YouTubeFilterProps> = ({ onFilterChange, channelList }) => {
  const [selectedCategory, setSelectedCategory] = useState('Ï†ÑÏ≤¥');
  const [selectedCriteria, setSelectedCriteria] = useState('Ï°∞ÌöåÏàò');
  const [selectedCountry, setSelectedCountry] = useState('üåç Ï†ÑÏÑ∏Í≥Ñ');
  const [selectedPeriod, setSelectedPeriod] = useState('ÏùºÍ∞Ñ');
  const [selectedDate, setSelectedDate] = useState(0);
  const [selectedChannel, setSelectedChannel] = useState('Ï†ÑÏ≤¥');

  // Í∏∞Í∞Ñ ÏÑ†ÌÉùÏù¥ Î≥ÄÍ≤ΩÎê† Îïå ÎÇ†Ïßú ÏÑ†ÌÉù Î¶¨ÏÖã
  useEffect(() => {
    setSelectedDate(0);
  }, [selectedPeriod]);

  // ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ïãú Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê ÏïåÎ¶º
  useEffect(() => {
    if (onFilterChange) {
      onFilterChange({
        selectedCategory,
        selectedCriteria,
        selectedCountry,
        selectedPeriod,
        selectedDate,
        selectedChannel
      });
    }
  }, [selectedCategory, selectedCriteria, selectedCountry, selectedPeriod, selectedDate, selectedChannel, onFilterChange]);

  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
      {/* 5Í∞ú Ïª¨Îüº Í∞ÄÎ°ú Î∞∞Ïπò */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr',
        gap: '6px',
        marginBottom: '16px'
      }}>
        {/* Ïπ¥ÌÖåÍ≥†Î¶¨ Ïª¨Îüº */}
        <div style={{
          border: '1px solid #e5e7eb',
          borderRadius: '8px',
          padding: '12px',
          backgroundColor: '#f9fafb'
        }}>
          <div style={{
            fontSize: '15px',
            fontWeight: 'normal',
            color: '#333',
            marginBottom: '8px',
            textAlign: 'center'
          }}>
            Ï±ÑÎÑêÎ™Ö
          </div>
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '2px',
            maxHeight: '300px',
            overflowY: 'auto'
          }}>
            {(channelList ? ['Ï†ÑÏ≤¥', ...Array.from(new Set(channelList))] : [
              'Ï†ÑÏ≤¥',
              'Film & Animation',
              'Autos & Vehicles',
              'Music',
              'Pets & Animals',
              'Sports',
              'Travel & Events',
              'Gaming',
              'People & Blogs',
              'Comedy',
              'Entertainment',
              'News & Politics',
              'Howto & Style',
              'Education',
              'Science & Technology',
              'Nonprofits & Activism'
            ]).map((category, index) => (
              <div
                key={`category-${index}-${category}`}
                onClick={() => {
                  setSelectedCategory(category);
                  // Ï±ÑÎÑê Î™©Î°ùÏóêÏÑú ÏÑ†ÌÉùÌïú Í≤ΩÏö∞ Ìï¥Îãπ Ï±ÑÎÑêÎ°ú ÌïÑÌÑ∞ÎßÅ
                  if (channelList && channelList.includes(category) && category !== 'Ï†ÑÏ≤¥') {
                    setSelectedChannel(category);
                  } else {
                    setSelectedChannel('Ï†ÑÏ≤¥');
                  }
                }}
                style={{
                  height: '40px',
                  minHeight: '40px',
                  maxHeight: '40px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '15px',
                  fontWeight: selectedCategory === category ? '600' : '400',
                  backgroundColor: selectedCategory === category ? 'rgba(124, 58, 237, 0.1)' : 'white',
                  color: selectedCategory === category ? 'rgb(124, 58, 237)' : '#333',
                  borderRadius: '10px',
                  cursor: 'pointer',
                  boxSizing: 'border-box'
                }}
              >
                {category}
              </div>
            ))}
          </div>
        </div>

        {/* Í∏∞Ï§Ä Ïª¨Îüº */}
        <div style={{
          border: '1px solid #e5e7eb',
          borderRadius: '8px',
          padding: '12px',
          backgroundColor: '#f9fafb'
        }}>
          <div style={{
            fontSize: '15px',
            fontWeight: 'normal',
            color: '#333',
            marginBottom: '8px',
            textAlign: 'center'
          }}>
            Í∏∞Ï§Ä
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
            {['Ï°∞ÌöåÏàò', 'Íµ¨ÎèÖÏûêÏàò'].map((criteria) => (
              <div
                key={criteria}
                onClick={() => setSelectedCriteria(criteria)}
                style={{
                  height: '40px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '15px',
                  fontWeight: selectedCriteria === criteria ? '600' : '400',
                  backgroundColor: selectedCriteria === criteria ? 'rgba(124, 58, 237, 0.1)' : 'white',
                  color: selectedCriteria === criteria ? 'rgb(124, 58, 237)' : '#333',
                  borderRadius: '10px',
                  cursor: 'pointer'
                }}
              >
                {criteria}
              </div>
            ))}
          </div>
        </div>

        {/* Íµ≠Í∞Ä Ïª¨Îüº */}
        <div style={{
          border: '1px solid #e5e7eb',
          borderRadius: '8px',
          padding: '12px',
          backgroundColor: '#f9fafb'
        }}>
          <div style={{
            fontSize: '15px',
            fontWeight: 'normal',
            color: '#333',
            marginBottom: '8px',
            textAlign: 'center'
          }}>
            Íµ≠Í∞Ä
          </div>
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '4px',
            maxHeight: '300px',
            overflowY: 'auto'
          }}>
            {[
              'üåç Ï†ÑÏÑ∏Í≥Ñ',
              'üá∞üá∑ ÌïúÍµ≠',
              'üá∫üá∏ ÎØ∏Íµ≠',
              'üáØüáµ ÏùºÎ≥∏',
              'üáÆüá≥ Ïù∏ÎèÑ',
              'üáßüá∑ Î∏åÎùºÏßà',
              'üá©üá™ ÎèÖÏùº',
              'üá´üá∑ ÌîÑÎûëÏä§',
              'üá¨üáß ÏòÅÍµ≠',
              'üá®üá¶ Ï∫êÎÇòÎã§',
              'üá¶üá∫ Ìò∏Ï£º',
              'üá∑üá∫ Îü¨ÏãúÏïÑ',
              'üáÆüá© Ïù∏ÎèÑÎÑ§ÏãúÏïÑ',
              'üá≤üáΩ Î©ïÏãúÏΩî',
              'üáÆüáπ Ïù¥ÌÉàÎ¶¨ÏïÑ',
              'üá™üá∏ Ïä§ÌéòÏù∏',
              'üåê Í∏∞ÌÉÄ'
            ].map((country) => (
              <div
                key={country}
                onClick={() => setSelectedCountry(country)}
                style={{
                  height: '40px',
                  minHeight: '40px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '15px',
                  fontWeight: selectedCountry === country ? '600' : '400',
                  backgroundColor: selectedCountry === country ? 'rgba(124, 58, 237, 0.1)' : 'white',
                  color: selectedCountry === country ? 'rgb(124, 58, 237)' : '#333',
                  borderRadius: '10px',
                  cursor: 'pointer'
                }}
              >
                {country}
              </div>
            ))}
          </div>
        </div>

        {/* Í∏∞Í∞Ñ Ïª¨Îüº */}
        <div style={{
          border: '1px solid #e5e7eb',
          borderRadius: '8px',
          padding: '12px',
          backgroundColor: '#f9fafb'
        }}>
          <div style={{
            fontSize: '15px',
            fontWeight: 'normal',
            color: '#333',
            marginBottom: '8px',
            textAlign: 'center'
          }}>
            Í∏∞Í∞Ñ
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
            {['ÏùºÍ∞Ñ', 'Ï£ºÍ∞Ñ', 'ÏõîÍ∞Ñ', 'Ïó∞Í∞Ñ'].map((period) => (
              <div
                key={period}
                onClick={() => setSelectedPeriod(period)}
                style={{
                  height: '40px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '15px',
                  fontWeight: selectedPeriod === period ? '600' : '400',
                  backgroundColor: selectedPeriod === period ? 'rgba(124, 58, 237, 0.1)' : 'white',
                  color: selectedPeriod === period ? 'rgb(124, 58, 237)' : '#333',
                  borderRadius: '10px',
                  cursor: 'pointer'
                }}
              >
                {period}
              </div>
            ))}
          </div>
        </div>

        {/* ÎÇ†Ïßú Ïª¨Îüº */}
        <div style={{
          border: '1px solid #e5e7eb',
          borderRadius: '8px',
          padding: '12px',
          backgroundColor: '#f9fafb'
        }}>
          <div style={{
            fontSize: '15px',
            fontWeight: 'normal',
            color: '#333',
            marginBottom: '8px',
            textAlign: 'center'
          }}>
            ÎÇ†Ïßú
          </div>
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '2px',
            maxHeight: '300px',
            overflowY: 'auto'
          }}>
            {(() => {
              const dates = [];
              const today = new Date();

              if (selectedPeriod === 'ÏùºÍ∞Ñ') {
                // ÏùºÍ∞Ñ: ÎÇ†ÏßúÎ≥Ñ ÌëúÏãú
                const weekdays = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
                for (let i = 0; i < 7; i++) {
                  const date = new Date(today);
                  date.setDate(today.getDate() - i);
                  const year = date.getFullYear();
                  const month = String(date.getMonth() + 1).padStart(2, '0');
                  const day = String(date.getDate()).padStart(2, '0');
                  const weekday = weekdays[date.getDay()];
                  const dateString = `${year}.${month}.${day}.(${weekday})`;

                  dates.push(
                    <div key={i} onClick={() => setSelectedDate(i)} style={{
                      height: '40px', minHeight: '40px', maxHeight: '40px', display: 'flex',
                      alignItems: 'center', justifyContent: 'center', fontSize: '15px', fontWeight: selectedDate === i ? '600' : '400',
                      backgroundColor: selectedDate === i ? 'rgba(124, 58, 237, 0.1)' : 'white',
                      color: selectedDate === i ? 'rgb(124, 58, 237)' : '#333', borderRadius: '10px',
                      cursor: 'pointer', boxSizing: 'border-box'
                    }}>
                      {dateString}
                    </div>
                  );
                }
              } else if (selectedPeriod === 'Ï£ºÍ∞Ñ') {
                // Ï£ºÍ∞Ñ: 9Ïõî 2Ï£º, 3Ï£ºÎßå ÌëúÏãú (Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå)
                const weeks = [
                  '9Ïõî 3Ï£º',
                  '9Ïõî 2Ï£º'
                ];

                weeks.forEach((week, i) => {
                  dates.push(
                    <div key={i} onClick={() => setSelectedDate(i)} style={{
                      height: '40px', minHeight: '40px', maxHeight: '40px', display: 'flex',
                      alignItems: 'center', justifyContent: 'center', fontSize: '15px', fontWeight: selectedDate === i ? '600' : '400',
                      backgroundColor: selectedDate === i ? 'rgba(124, 58, 237, 0.1)' : 'white',
                      color: selectedDate === i ? 'rgb(124, 58, 237)' : '#333', borderRadius: '10px',
                      cursor: 'pointer', boxSizing: 'border-box'
                    }}>
                      {week}
                    </div>
                  );
                });
              } else if (selectedPeriod === 'ÏõîÍ∞Ñ') {
                // ÏõîÍ∞Ñ: 9ÏõîÎßå ÌëúÏãú (Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå)
                const months = ['9Ïõî'];

                months.forEach((month, i) => {
                  dates.push(
                    <div key={i} onClick={() => setSelectedDate(i)} style={{
                      height: '40px', minHeight: '40px', maxHeight: '40px', display: 'flex',
                      alignItems: 'center', justifyContent: 'center', fontSize: '15px', fontWeight: selectedDate === i ? '600' : '400',
                      backgroundColor: selectedDate === i ? 'rgba(124, 58, 237, 0.1)' : 'white',
                      color: selectedDate === i ? 'rgb(124, 58, 237)' : '#333', borderRadius: '10px',
                      cursor: 'pointer', boxSizing: 'border-box'
                    }}>
                      {month}
                    </div>
                  );
                });
              } else if (selectedPeriod === 'Ïó∞Í∞Ñ') {
                // Ïó∞Í∞Ñ: 2025ÎÖÑÎßå ÌëúÏãú (Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå)
                const years = ['2025ÎÖÑ'];

                years.forEach((year, i) => {
                  dates.push(
                    <div key={i} onClick={() => setSelectedDate(i)} style={{
                      height: '40px', minHeight: '40px', maxHeight: '40px', display: 'flex',
                      alignItems: 'center', justifyContent: 'center', fontSize: '15px', fontWeight: selectedDate === i ? '600' : '400',
                      backgroundColor: selectedDate === i ? 'rgba(124, 58, 237, 0.1)' : 'white',
                      color: selectedDate === i ? 'rgb(124, 58, 237)' : '#333', borderRadius: '10px',
                      cursor: 'pointer', boxSizing: 'border-box'
                    }}>
                      {year}
                    </div>
                  );
                });
              }

              return dates;
            })()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default YouTubeFilter;